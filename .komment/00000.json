[
  {
    "name": "app.py",
    "path": "superlinked_app/app.py",
    "content": {
      "structured": {
        "description": "And instantiates various data structures and components in Superlinked's framework for natural language processing and information retrieval. It includes schema definitions for product and user entities, an event schema, space definitions for text and number embeddings, event weights, an index with associated effects, a query object, and sources for restful API endpoints. The code also sets up a vector database connection to Redis and registers the components in the Superlinked registry.",
        "items": [
          {
            "id": "89f60bdb-2a9f-4b81-8f4a-af4001ab1291",
            "ancestors": [],
            "description": "Defines a data schema for product information. It includes fields for description, name, category, price, review count, and rating, as well as an ID field. This schema outlines the structure and type of data for each product attribute.",
            "attributes": [
              {
                "name": "description",
                "type_name": "String",
                "description": "Mandatory as it has no default value assigned. It represents a description of the product."
              },
              {
                "name": "name",
                "type_name": "String",
                "description": "Required to hold a name for the product. It can be any string value, without any specific length or format restriction."
              },
              {
                "name": "category",
                "type_name": "String",
                "description": "Described as a category of the product, likely representing a broad or narrow classification within a product hierarchy."
              },
              {
                "name": "price",
                "type_name": "Integer",
                "description": "Represented as a whole number with no decimal places, indicating the monetary value of a product."
              },
              {
                "name": "review_count",
                "type_name": "Integer",
                "description": "Intended to store the count of reviews for a product."
              },
              {
                "name": "review_rating",
                "type_name": "Integer",
                "description": "A representation of the average rating given by customers for a product based on their reviews."
              },
              {
                "name": "id",
                "type_name": "IdField",
                "description": "Part of the schema for products. It represents a unique identifier for each product, likely used to identify or link to specific products within the system."
              }
            ],
            "name": "ProductSchema",
            "location": {
              "start": 27,
              "insert": 29,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 9,
            "docLength": null
          },
          {
            "id": "bb0076cb-458d-ddb9-1643-b2677fd3f953",
            "ancestors": [],
            "description": "Defines a schema for user preferences, comprising four fields: `preference_description`, `preference_name`, `preference_category`, and `id`. This schema provides a structured format for storing and managing user preferences.",
            "attributes": [
              {
                "name": "preference_description",
                "type_name": "String",
                "description": "Used to describe a user's preference."
              },
              {
                "name": "preference_name",
                "type_name": "String",
                "description": "Part of the schema definition for user preferences. It likely represents a descriptive name or label for a user's preference, such as \"Favorite Color\" or \"Preferred Language\"."
              },
              {
                "name": "preference_category",
                "type_name": "String",
                "description": "Part of a user's preferences, likely categorizing their specific preference (e.g., music genre)."
              },
              {
                "name": "id",
                "type_name": "IdField",
                "description": "A unique identifier for each user object."
              }
            ],
            "name": "UserSchema",
            "location": {
              "start": 37,
              "insert": 39,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 6,
            "docLength": null
          },
          {
            "id": "abba30eb-076d-e186-494c-6683fd7c9cd1",
            "ancestors": [],
            "description": "Defines a schema for representing events, which can be products or user-related actions. It contains fields for product and user references, event type, unique ID, and creation timestamp. This schema provides structure for storing and querying events in a database or API response.",
            "attributes": [
              {
                "name": "product",
                "type_name": "SchemaReference[ProductSchema]",
                "description": "Referenced from another schema, indicating that it represents a reference to a ProductSchema object."
              },
              {
                "name": "user",
                "type_name": "SchemaReference[UserSchema]",
                "description": "Referenced from a UserSchema."
              },
              {
                "name": "event_type",
                "type_name": "String",
                "description": "Part of the schema definition for events. It represents the type of event being recorded."
              },
              {
                "name": "id",
                "type_name": "IdField",
                "description": "Implicitly considered as a unique identifier for each event instance, allowing it to be uniquely identified and referenced throughout the system."
              },
              {
                "name": "created_at",
                "type_name": "CreatedAtField",
                "description": "Expected to be present in all instances of this schema. Its presence suggests that it stores information related to when the event was created, likely as a timestamp."
              }
            ],
            "name": "EventSchema",
            "location": {
              "start": 44,
              "insert": 46,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "Superlinked Server Sink/main.py",
    "content": {
      "structured": {
        "description": "An application that consumes events from a Kafka topic and sends data to a Superlinked endpoint. It utilizes the QuixStreams library for handling Kafka consumption and produces random event IDs and timestamps using built-in functions. The sent data is logged and error messages are recorded in a file if the response is not 202.",
        "items": [
          {
            "id": "dfae01fe-c53c-eb99-0f4e-9fa5ee8e2270",
            "ancestors": [],
            "description": "Sends a POST request to Superlinked's API with data from a dictionary, including user and product information, a randomly generated event ID, and a current timestamp. It prints the response status code and text, logging errors if the response is not 202.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Expected to contain keys named 'user', 'product' and 'event_type'."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "data = {'user': 'john', 'product': 'apple', 'event_type': 'purchase'}\nsend_data_to_superlinked(data)",
              "description": ""
            },
            "name": "send_data_to_superlinked",
            "location": {
              "start": 26,
              "insert": 28,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 23,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "ingest-events/main.py",
    "content": {
      "structured": {
        "description": "An application using Quix Streams library and uses it to simulate a data source by generating random events for various user-product combinations. The code reads from a hardcoded dataset, determines possible event types based on history for each combination, generates payloads with event information, and publishes them to Kafka topics using the Producer object provided by Quix Streams.",
        "items": []
      }
    }
  },
  {
    "name": "main.py",
    "path": "Streamlit Recommendations Dash/main.py",
    "content": {
      "structured": {
        "description": "A Streamlit application that allows users to query an API with specific weights for filtering results. It uses the requests library to send POST requests to the API and pandas to manipulate data. The application has a dropdown menu for selecting user IDs, input fields for adjusting weights, and displays the results in a dataframe.",
        "items": [
          {
            "id": "b479a2d8-33cc-eb8a-654a-8610da9d9863",
            "ancestors": [],
            "description": "Retrieves data for a specified `user_id` by sending a POST request to a URL, parsing the JSON response, extracting relevant data into a Pandas DataFrame, and returning it. If the request fails, it displays an error message and returns an empty DataFrame.",
            "params": [
              {
                "name": "user_id",
                "type_name": "int | str",
                "description": "Required for the function to execute successfully, as it forms part of the payload that is sent with the HTTP POST request to the specified URL."
              }
            ],
            "returns": {
              "type_name": "pdDataFrame|pdDataFrame",
              "description": "An empty DataFrame if the request fails, and a DataFrame filled with extracted data if the request succeeds."
            },
            "usage": {
              "language": "python",
              "code": "data = get_data(12345)\n",
              "description": "\nIn this example, the function get_data returns a DataFrame containing data related to the user with ID 12345."
            },
            "name": "get_data",
            "location": {
              "start": 20,
              "insert": 21,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "a5d3f84e-c29a-0f9b-c842-b8ee99b25a4b",
            "ancestors": [],
            "description": "Retrieves cached data based on user-defined weights for various attributes such as user ID, description, category, name, price, and review metrics. It caches the result using the `@st.cache_data` decorator to improve performance.",
            "params": [
              {
                "name": "user_id",
                "type_name": "Any",
                "description": "Used as an input to the `get_data` function. Its value represents a unique identifier for a user or item, allowing for data retrieval based on this attribute."
              },
              {
                "name": "description_weight",
                "type_name": "float | int",
                "description": "1 of 7 weights used to calculate the overall weight for each data point when fetching data from a database using `get_data`."
              },
              {
                "name": "category_weight",
                "type_name": "int | float",
                "description": "Likely used to determine the relative importance or weightage given to the category attribute when calculating some aggregated value, such as a score."
              },
              {
                "name": "name_weight",
                "type_name": "float",
                "description": "Likely used to indicate the relative importance or \"weight\" of the name attribute in the data retrieval process."
              },
              {
                "name": "price_weight",
                "type_name": "float",
                "description": "Used to determine the importance of the price attribute when calculating the weighted sum. Its value represents the relative significance of the price in the overall calculation."
              },
              {
                "name": "review_count_weight",
                "type_name": "int",
                "description": "Used as a weight to determine the importance or relevance of the review count when calculating the ranking score for a user's data."
              },
              {
                "name": "review_rating_weight",
                "type_name": "float",
                "description": "Used to specify the relative importance of review ratings in the calculation process, likely for weighting or aggregating multiple factors affecting ranking."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "The result of calling `get_data` with the specified arguments and caching it for future use through the `@st.cache_data` decorator."
            },
            "usage": {
              "language": "python",
              "code": "get_cached_data(123, 0.2, 0.3, 0.1, 0.4, 0.5, 0.6)",
              "description": ""
            },
            "name": "get_cached_data",
            "location": {
              "start": 96,
              "insert": 98,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f864f30f-f3c7-6391-c44b-41915a0190d1",
            "ancestors": [],
            "description": "Retrieves data from a URL via a POST request, using weights to filter results by user ID, description, category, name, price, review count, and review rating. The response is parsed into a pandas DataFrame if successful, otherwise an error message is displayed.",
            "params": [
              {
                "name": "user_id",
                "type_name": "int | str",
                "description": "Expected to be passed as an input to the function. It appears to play a crucial role in constructing the payload sent in the POST request, along with other parameters."
              },
              {
                "name": "description_weight",
                "type_name": "int | float",
                "description": "Used to specify the weight of description attribute in the query."
              },
              {
                "name": "category_weight",
                "type_name": "float",
                "description": "Part of the JSON payload that is sent to the API via a POST request. It likely represents the relative importance of the category attribute in the search query."
              },
              {
                "name": "name_weight",
                "type_name": "float",
                "description": "Used to specify the weightage of product name in a search query. It determines how much importance should be given to product name while searching for data."
              },
              {
                "name": "price_weight",
                "type_name": "float",
                "description": "Used to determine the weight given to price when querying data. It appears that this value is used to adjust the importance of price in the query results."
              },
              {
                "name": "review_count_weight",
                "type_name": "int",
                "description": "Part of a JSON payload that gets sent to a server via an HTTP POST request. It represents the weight given to review count in ranking results."
              },
              {
                "name": "review_rating_weight",
                "type_name": "int",
                "description": "1 of the 8 parameters used to filter and rank search results based on their review ratings, along with other weights for description, category, name, price, and review count."
              }
            ],
            "returns": {
              "type_name": "pdDataFrame|pdDataFrame",
              "description": "0 rows and columns if request fails, otherwise it returns a pandas DataFrame containing extracted data. The DataFrame's number of rows depends on the 'limit' parameter set to 10 in the payload."
            },
            "usage": {
              "language": "python",
              "code": "user_id = 12345\ndescription_weight = 0.5\ncategory_weight = 0.3\nname_weight = 0.1\nprice_weight = 0.05\nreview_count_weight = 0.15\nreview_rating_weight = 0.2\n\ndata = get_data(user_id, description_weight, category_weight, name_weight, price_weight, review_count_weight, review_rating_weight)\n",
              "description": ""
            },
            "name": "get_data",
            "location": {
              "start": 101,
              "insert": 102,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          }
        ]
      }
    }
  }
]