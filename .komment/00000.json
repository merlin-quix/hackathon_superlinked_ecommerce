[
  {
    "name": "app.py",
    "path": "superlinked_app/app.py",
    "content": {
      "structured": {
        "description": "And instantiates various data structures and components in Superlinked's framework for natural language processing and information retrieval. It includes schema definitions for product and user entities, an event schema, space definitions for text and number embeddings, event weights, an index with associated effects, a query object, and sources for restful API endpoints. The code also sets up a vector database connection to Redis and registers the components in the Superlinked registry.",
        "items": [
          {
            "id": "89f60bdb-2a9f-4b81-8f4a-af4001ab1291",
            "ancestors": [],
            "description": "Defines a data schema for product information. It includes fields for description, name, category, price, review count, and rating, as well as an ID field. This schema outlines the structure and type of data for each product attribute.",
            "attributes": [
              {
                "name": "description",
                "type_name": "String",
                "description": "Mandatory as it has no default value assigned. It represents a description of the product."
              },
              {
                "name": "name",
                "type_name": "String",
                "description": "Required to hold a name for the product. It can be any string value, without any specific length or format restriction."
              },
              {
                "name": "category",
                "type_name": "String",
                "description": "Described as a category of the product, likely representing a broad or narrow classification within a product hierarchy."
              },
              {
                "name": "price",
                "type_name": "Integer",
                "description": "Represented as a whole number with no decimal places, indicating the monetary value of a product."
              },
              {
                "name": "review_count",
                "type_name": "Integer",
                "description": "Intended to store the count of reviews for a product."
              },
              {
                "name": "review_rating",
                "type_name": "Integer",
                "description": "A representation of the average rating given by customers for a product based on their reviews."
              },
              {
                "name": "id",
                "type_name": "IdField",
                "description": "Part of the schema for products. It represents a unique identifier for each product, likely used to identify or link to specific products within the system."
              }
            ],
            "name": "ProductSchema",
            "location": {
              "start": 27,
              "insert": 29,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 9,
            "docLength": null
          },
          {
            "id": "bb0076cb-458d-ddb9-1643-b2677fd3f953",
            "ancestors": [],
            "description": "Defines a schema for user preferences, comprising four fields: `preference_description`, `preference_name`, `preference_category`, and `id`. This schema provides a structured format for storing and managing user preferences.",
            "attributes": [
              {
                "name": "preference_description",
                "type_name": "String",
                "description": "Used to describe a user's preference."
              },
              {
                "name": "preference_name",
                "type_name": "String",
                "description": "Part of the schema definition for user preferences. It likely represents a descriptive name or label for a user's preference, such as \"Favorite Color\" or \"Preferred Language\"."
              },
              {
                "name": "preference_category",
                "type_name": "String",
                "description": "Part of a user's preferences, likely categorizing their specific preference (e.g., music genre)."
              },
              {
                "name": "id",
                "type_name": "IdField",
                "description": "A unique identifier for each user object."
              }
            ],
            "name": "UserSchema",
            "location": {
              "start": 37,
              "insert": 39,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 6,
            "docLength": null
          },
          {
            "id": "abba30eb-076d-e186-494c-6683fd7c9cd1",
            "ancestors": [],
            "description": "Defines a schema for representing events, which can be products or user-related actions. It contains fields for product and user references, event type, unique ID, and creation timestamp. This schema provides structure for storing and querying events in a database or API response.",
            "attributes": [
              {
                "name": "product",
                "type_name": "SchemaReference[ProductSchema]",
                "description": "Referenced from another schema, indicating that it represents a reference to a ProductSchema object."
              },
              {
                "name": "user",
                "type_name": "SchemaReference[UserSchema]",
                "description": "Referenced from a UserSchema."
              },
              {
                "name": "event_type",
                "type_name": "String",
                "description": "Part of the schema definition for events. It represents the type of event being recorded."
              },
              {
                "name": "id",
                "type_name": "IdField",
                "description": "Implicitly considered as a unique identifier for each event instance, allowing it to be uniquely identified and referenced throughout the system."
              },
              {
                "name": "created_at",
                "type_name": "CreatedAtField",
                "description": "Expected to be present in all instances of this schema. Its presence suggests that it stores information related to when the event was created, likely as a timestamp."
              }
            ],
            "name": "EventSchema",
            "location": {
              "start": 44,
              "insert": 46,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "Superlinked Server Sink/main.py",
    "content": {
      "structured": {
        "description": "An application that consumes events from a Kafka topic and sends data to a Superlinked endpoint. It utilizes the QuixStreams library for handling Kafka consumption and produces random event IDs and timestamps using built-in functions. The sent data is logged and error messages are recorded in a file if the response is not 202.",
        "items": [
          {
            "id": "dfae01fe-c53c-eb99-0f4e-9fa5ee8e2270",
            "ancestors": [],
            "description": "Sends a POST request to Superlinked's API with data from a dictionary, including user and product information, a randomly generated event ID, and a current timestamp. It prints the response status code and text, logging errors if the response is not 202.",
            "params": [
              {
                "name": "data",
                "type_name": "dict",
                "description": "Expected to contain keys named 'user', 'product' and 'event_type'."
              }
            ],
            "returns": null,
            "usage": {
              "language": "python",
              "code": "data = {'user': 'john', 'product': 'apple', 'event_type': 'purchase'}\nsend_data_to_superlinked(data)",
              "description": ""
            },
            "name": "send_data_to_superlinked",
            "location": {
              "start": 26,
              "insert": 28,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 23,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main.py",
    "path": "ingest-events/main.py",
    "content": {
      "structured": {
        "description": "A Quix Streams application that simulates user-product interactions and publishes events to a Kafka topic. It uses randomization to generate product IDs, event types, users, and timestamps, then appends these events to an in-memory history for each unique combination of user-product. The events are published to the Kafka topic using the Quix Streams producer.",
        "items": []
      }
    }
  },
  {
    "name": "main.py",
    "path": "Streamlit Recommendations Dash/main.py",
    "content": {
      "structured": {
        "description": "A Streamlit UI that allows users to query a Superlinked API for real-time recommendations based on user input weights. The app uses pandas and requests packages to fetch data from the API and display it in a table. It also employs caching to avoid unnecessary API calls, utilizing the `@st.cache_data` decorator.",
        "items": [
          {
            "id": "a66900fe-bd50-30b1-b348-71c15efc1ac2",
            "ancestors": [],
            "description": "Submits a POST request to a specified URL, passing a JSON payload containing user ID and query parameters. If the response is successful (200 status code), it extracts data from the response, converts it into a Pandas DataFrame, and returns it. Otherwise, it displays an error message.",
            "params": [
              {
                "name": "user_id",
                "type_name": "int | str",
                "description": "Passed to the payload dictionary, which is used in an HTTP POST request to retrieve data based on the provided user ID."
              }
            ],
            "returns": {
              "type_name": "pdDataFrame",
              "description": "A pandas DataFrame object that contains the extracted data from the query results, if the request is successful. If the request fails, it returns an empty pandas DataFrame."
            },
            "usage": {
              "language": "python",
              "code": "data = get_data(1234)\n",
              "description": "\n\nNote: The provided code assumes that 'url' and 'headers' are defined elsewhere in the script."
            },
            "name": "get_data",
            "location": {
              "start": 20,
              "insert": 21,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "ffd6559d-1b55-1cb9-b945-4d9e58054a53",
            "ancestors": [],
            "description": "Caches the results of a call to `get_data` by using the `@st.cache_data` decorator. It takes seven parameters and returns the result of the cached or recalculated data based on these parameters.",
            "params": [
              {
                "name": "user_id",
                "type_name": "any",
                "description": "Used to retrieve cached data for a specific user. It appears to be an identifier that corresponds to a user entity, possibly used to filter or query data related to that user."
              },
              {
                "name": "description_weight",
                "type_name": "int | float",
                "description": "Used to specify the relative importance or weighting factor for the description attribute when retrieving data related to a specific user ID."
              },
              {
                "name": "category_weight",
                "type_name": "int | float",
                "description": "Used to weight the importance of the category in determining the ranking of items, likely within a machine learning model or algorithm."
              },
              {
                "name": "name_weight",
                "type_name": "float",
                "description": "1 of the input parameters used to calculate the weights for the data retrieval process, alongside other weight parameters such as `description_weight`, `category_weight`, etc."
              },
              {
                "name": "price_weight",
                "type_name": "float",
                "description": "Used to specify the relative importance or weightage of price in calculating the score or ranking for each data item."
              },
              {
                "name": "review_count_weight",
                "type_name": "float",
                "description": "Used to calculate the weighted importance of the review count for filtering or sorting purposes, along with other parameters such as description weight, category weight, etc."
              },
              {
                "name": "review_rating_weight",
                "type_name": "float",
                "description": "Used to calculate the weightage or importance given to the review rating while retrieving data for a user, with higher values indicating greater significance."
              }
            ],
            "returns": {
              "type_name": "Any",
              "description": "Retrieved from the call to `get_data`. This implies that the result depends on the actual arguments passed and their corresponding weights, but it's not clear without additional context what data is being retrieved."
            },
            "usage": {
              "language": "python",
              "code": "result = get_cached_data(12345, 0.2, 0.4, 0.1, 0.3, 0.6, 0.5)",
              "description": ""
            },
            "name": "get_cached_data",
            "location": {
              "start": 96,
              "insert": 98,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4b3dbfe8-ea34-1f93-8f40-5fa2391d9eef",
            "ancestors": [],
            "description": "Retrieves data from an API using a POST request and converts it to a Pandas DataFrame. It takes several weights as parameters, which are likely used for filtering or ranking results. The function returns a DataFrame containing the extracted data if the request is successful; otherwise, it returns an empty DataFrame.",
            "params": [
              {
                "name": "user_id",
                "type_name": "str | int",
                "description": "Required for the request payload to fetch data from an API based on the provided user ID."
              },
              {
                "name": "description_weight",
                "type_name": "float",
                "description": "Used to weight the importance of the product description in the search query. It is passed along with other weights for category, name, price, review count, and review rating to influence the search results."
              },
              {
                "name": "category_weight",
                "type_name": "float",
                "description": "Used as part of the payload for a POST request to a specified URL. It represents a weight value corresponding to the category attribute of data records being queried."
              },
              {
                "name": "name_weight",
                "type_name": "float",
                "description": "Used to determine the weightage given to the name attribute when querying data from an API. It affects the relevance of results based on the importance assigned to this attribute."
              },
              {
                "name": "price_weight",
                "type_name": "float",
                "description": "Part of a JSON payload sent as a POST request to an unknown URL (`url`). It appears to be used for filtering or ranking search results based on product price."
              },
              {
                "name": "review_count_weight",
                "type_name": "int",
                "description": "Used to specify the weight assigned to the review count when calculating the overall relevance score of results returned from the query."
              },
              {
                "name": "review_rating_weight",
                "type_name": "float",
                "description": "Part of the payload sent to the API through a POST request. It represents the relative importance of review ratings when ranking results."
              }
            ],
            "returns": {
              "type_name": "pdDataFrame",
              "description": "A pandas DataFrame object if the request was successful and data could be extracted, otherwise it returns an empty pandas DataFrame."
            },
            "usage": {
              "language": "python",
              "code": "user_id = 1234\ndescription_weight = 0.5\ncategory_weight = 0.3\nname_weight = 0.1\nprice_weight = 0.05\nreview_count_weight = 0.05\nreview_rating_weight = 0.05\n\ndata_frame = get_data(user_id, description_weight, category_weight, name_weight, price_weight, review_count_weight, review_rating_weight)\n",
              "description": ""
            },
            "name": "get_data",
            "location": {
              "start": 101,
              "insert": 102,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 25,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "main_backup.py",
    "path": "Streamlit Recommendations Dash/main_backup.py",
    "content": {
      "structured": {
        "description": "A web application using Streamlit that provides real-time recommendations based on user input and query parameters. It uses the Superlinked API to fetch data and pandas for data manipulation. The application features a dropdown menu for selecting users, sliders for adjusting weights of different criteria (description, category, name, price, review count, and review rating), and a countdown timer that refreshes the recommendation every 10 seconds.",
        "items": [
          {
            "id": "c9b7a26e-aa60-509e-7346-4d9d6dc22ee6",
            "ancestors": [],
            "description": "Retrieves data based on a given user ID by sending a POST request to a specified URL, parses the response JSON, extracts relevant information into a pandas DataFrame, and returns it. If the request fails, it displays an error message and returns an empty DataFrame.",
            "params": [
              {
                "name": "user_id",
                "type_name": "int | str",
                "description": "Used to construct a payload that contains information about the user for which data needs to be retrieved. It is required as part of the payload."
              }
            ],
            "returns": {
              "type_name": "pdDataFrame|pdDataFrame",
              "description": "A DataFrame object if the request to the server is successful and it returns an empty DataFrame otherwise, indicating that the request failed or no data was extracted."
            },
            "usage": {
              "language": "python",
              "code": "user_id = 12345\ndf = get_data(user_id)\n",
              "description": ""
            },
            "name": "get_data",
            "location": {
              "start": 20,
              "insert": 21,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "124ce408-e197-b0bc-ec47-d4622161bda7",
            "ancestors": [],
            "description": "Retrieves and returns cached data for a given set of input parameters. It calls another function `get_data` with the same parameters, likely to fetch new data if it's not already cached or outdated.",
            "params": [
              {
                "name": "user_id",
                "type_name": "any",
                "description": "Used as input to retrieve cached data from the user's profile. Its value determines which user's data will be retrieved."
              },
              {
                "name": "description_weight",
                "type_name": "float",
                "description": "Used to specify the relative importance or weight of product description when calculating a weighted average score."
              },
              {
                "name": "category_weight",
                "type_name": "int",
                "description": "Used to determine the weightage given to category information when calculating similarity scores for filtering data based on user preferences."
              },
              {
                "name": "name_weight",
                "type_name": "float",
                "description": "Used as a weight for the name attribute when retrieving data using the `get_data` function. It specifies how important the name attribute is relative to other attributes in the calculation."
              },
              {
                "name": "price_weight",
                "type_name": "float",
                "description": "Used to weight the importance of the product's price when calculating its overall score. It represents the relative significance of price compared to other factors."
              },
              {
                "name": "review_count_weight",
                "type_name": "int",
                "description": "Used to determine the weight given to the number of reviews when calculating the weighted average score for a product."
              },
              {
                "name": "review_rating_weight",
                "type_name": "float",
                "description": "7th in sequence among other weights, likely representing the weightage given to review ratings in a data retrieval process."
              }
            ],
            "returns": {
              "type_name": "Any",
              "description": "Cached result from a call to `get_data`. This caching allows for faster execution when the same inputs are provided again."
            },
            "usage": {
              "language": "python",
              "code": "result = get_cached_data(123, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)",
              "description": ""
            },
            "name": "get_cached_data",
            "location": {
              "start": 96,
              "insert": 98,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "71c9a616-71d7-4da4-4846-4fe09756f30c",
            "ancestors": [],
            "description": "Runs a POST request to a specified URL with a payload containing various weights and returns a pandas DataFrame containing extracted data if the response is successful, otherwise it displays an error message and returns an empty DataFrame.",
            "params": [
              {
                "name": "user_id",
                "type_name": "int",
                "description": "Likely used to filter or retrieve data based on a specific user's ID from an external database or API."
              },
              {
                "name": "description_weight",
                "type_name": "float",
                "description": "Used to specify the relative importance or relevance of the product description in the query. It is one of the factors considered when processing the user's request."
              },
              {
                "name": "category_weight",
                "type_name": "float",
                "description": "Part of the payload sent to the requests.post method. It represents the weightage given to category in the query."
              },
              {
                "name": "name_weight",
                "type_name": "float",
                "description": "Part of the payload being sent to the server as JSON. It represents the weight assigned to the name field in the query."
              },
              {
                "name": "price_weight",
                "type_name": "int",
                "description": "6th in the list of parameters passed to the function. It represents the weight assigned to price when calculating a score for search results."
              },
              {
                "name": "review_count_weight",
                "type_name": "int",
                "description": "Part of the payload sent with the POST request to the specified URL. It represents the weight given to review count while evaluating query results."
              },
              {
                "name": "review_rating_weight",
                "type_name": "float",
                "description": "Used to determine the weight given to review ratings when calculating the overall score for a query result."
              }
            ],
            "returns": {
              "type_name": "pdDataFrame|pdDataFrame",
              "description": "Empty if the request fails otherwise, it contains extracted data from a response."
            },
            "usage": {
              "language": "python",
              "code": "user_id = \"12345\"\ndescription_weight = 0.5\ncategory_weight = 0.3\nname_weight = 0.1\nprice_weight = 0.05\nreview_count_weight = 0.15\nreview_rating_weight = 0.01\n\ndf = get_data(user_id, description_weight, category_weight, name_weight, price_weight, review_count_weight, review_rating_weight)\n",
              "description": ""
            },
            "name": "get_data",
            "location": {
              "start": 101,
              "insert": 102,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          }
        ]
      }
    }
  }
]